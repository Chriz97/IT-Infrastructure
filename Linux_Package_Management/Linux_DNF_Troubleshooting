#!/bin/bash
# Linux DNF Troubleshooting Script
# This script provides essential commands to troubleshoot and resolve issues with the DNF package manager.

# Step 1: Register the System (RHEL Only)
# Ensure the system is registered to access repositories (RHEL systems).
subscription-manager register

# Step 2: Verify Enabled Repositories
# List all repositories available and currently enabled.
dnf repolist

# Step 3: Find the Package Providing a Specific File
# Use 'dnf provides' to identify which package contains a specific file.
dnf provides /usr/bin/vim

# Step 4: Query Package Information
# Use 'rpm -qi' to display detailed information about an installed package.
rpm -qi perl-if

# Step 5: Verify Package Signature
# Use 'rpm -K' to check the integrity and signature of a package file.
# The '-vv' option provides verbose output for detailed debugging.
rpm -K -vv vim-enhanced

# Step 6: Verify Installed Packages
# Use 'rpm -V' to verify the integrity of an installed package.
# This command checks for missing files, modified files, or incorrect permissions.
rpm -V vim-enhanced

# Step 7: Reinstall a Package
# If a package is corrupted, you can reinstall it using the following command:
sudo dnf reinstall vim-enhanced

# Step 8: Handle Interrupted Updates
# Example: The update process for 'httpd' was interrupted.
# 1. Check the installation scripts of the package to understand what happened.
rpm -q --scripts httpd | less

# 2. View the history of DNF transactions to identify the interrupted update.
dnf history

# 3. Undo the specific transaction (replace '15' with the actual transaction ID from 'dnf history').
sudo dnf history undo 15

# 4. Retry updating the 'httpd' package to ensure it's properly installed.
sudo dnf update httpd

# Step 9: Rollback to a Previous Transaction
# If a recent package update caused issues, roll back to a previous DNF transaction.
# Replace '10' with the transaction ID from 'dnf history list'.
sudo dnf history rollback 10

# Step 10: Clean DNF Metadata
# If there are issues with package metadata, clear the cache and re-download it.
sudo dnf clean all
sudo dnf makecache

# Step 11: Fix Broken Dependencies
# If there are dependency issues, try fixing them automatically.
sudo dnf distro-sync

# Step 12: List Package History
# Check the history of package installations, updates, and removals to identify recent changes.
dnf history list

# Step 13: Show Details of a Specific Transaction
# View detailed information about a specific transaction ID.
# Replace '10' with the transaction ID.
dnf history info 10

# Step 14: Debugging DNF Issues
# Enable verbose output to troubleshoot errors or performance issues with DNF.
sudo dnf -v update

# Step 15: Downgrade a Package
# If an update causes issues, downgrade the package to a previous version.
# Replace 'vim-enhanced' with the package name.
sudo dnf downgrade vim-enhanced

# Step 16: List Orphaned Packages
# Identify orphaned packages (installed packages no longer required by any other package).
dnf repoquery --extras

# Step 17: Remove Orphaned Packages
# Clean up orphaned packages to free up disk space.
sudo dnf autoremove

# Step 18: Verify Package Files Without RPM Database
# If the RPM database is corrupted, verify files manually using the filesystem.
find /usr -name "vim"  # Example: Locate files related to vim.

# Step 19: Rebuild the RPM Database
# If the RPM database becomes corrupted, rebuild it.
sudo rm -f /var/lib/rpm/__db*
sudo rpm --rebuilddb
