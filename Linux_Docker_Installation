# Docker CE Installation Script for RHEL-Based Systems (e.g., Fedora, CentOS, RHEL)
# Note: This script is specifically for Docker CE and not for Podman-Docker.

# Step 1: Check if Docker or Podman-Docker is already installed
whereis docker

# Step 2: Remove any existing Docker installations to avoid conflicts
sudo dnf remove docker docker-client  docker-client-latest  docker-common  docker-latest    docker-latest-logrotate   docker-logrotate   docker-selinux   docker-engine-selinux   docker-engine

# Step 3: Install 'dnf-plugins-core' to manage additional repositories
sudo dnf -y install dnf-plugins-core

# Step 4: Add the official Docker CE repository
sudo dnf-3 config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo

# Step 5: Install Docker CE, CLI, container runtime, and additional plugins
sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

# Step 6: Enable and Start the Docker Service
sudo systemctl enable --now docker

# Step 7: Verify Docker Installation by Checking Running Containers
sudo docker ps -a

# Step 8: (Optional) Allow Current User to Run Docker Without sudo
sudo usermod -aG docker $USER

# Step 9: Test Docker Installation (Optional)
sudo docker run hello-world
sudo docker ps -a (Should yield the hello-world container)

# The following commands are for Docker Management

# Start a Container by ID or Name
sudo docker start [container_id or container_name]

# Stopping a Container
sudo docker stopo [container_id or container_name]

# Restart a Docker
sudo docker restart [container_id or container_name]

# Remove a Container
sudo docker rm [container_id or container_name]

# Delete all Stopped Containers
sudo docker container prune -f

# List all Images
sudo docker images

# Delete a Docker Image
sudo docker rmi [image_id or image_name]

# Delete all Unused Docker Images
sudo docker image prune -a -f

# Docker Network Configuration

# Listing Docker Networks
sudo docker network ls

# Creating a New Docker Network
# Syntax: docker network create [network_name]
# Example: docker network create my_network
sudo docker network create my_network

# Connecting a Container to a Network
# Example: docker network connect my_network [container_id]
sudo docker network connect my_network [container_id or container_name]

# Disconnecting a Container from a Network
sudo docker network disconnect my_network [container_id or container_name]

# Deleting a Docker Network
sudo docker network rm my_network

# Viewing Detailed Network Information for a Network
sudo docker network inspect my_network
